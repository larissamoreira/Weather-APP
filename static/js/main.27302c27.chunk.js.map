{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","registerServiceWorker.js","index.js"],"names":["Titles","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","console","log","list","setState","main","temp","sys","weather","this","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.27302c27.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Titles = () => (\n    <div>\n        <h1 className=\"title-container__title\"> Weather Finder </h1>\n        <p className=\"title-container__subtitle\"> Find out temperature conditions and more. </p>\n    </div>\n)\n\nexport default Titles;","import React from \"react\";\n\nconst Form = props => (\n    <form onSubmit={props.getWeather}>\n        <input type=\"text\" name=\"city\" placeholder=\"City\" />\n        <input type=\"text\" name=\"country\" placeholder=\"Country\" />\n        <button>Get Weather</button>\n    </form>\n)\nexport default Form;","import React from \"react\";\n\nconst Weather = props => (\n    <div className=\"weather__info\">\n        {\n            props.city && props.country && <p className=\"weather__key\">Location:\n            <span className=\"weather__value\"> {props.city}, {props.country}</span>\n            </p>\n        }\n        {\n            props.temperature && <p className=\"weather__key\">Temperature:\n            <span className=\"weather__value\"> {props.temperature}</span>\n            </p>\n        }\n        {\n            props.humidity && <p className=\"weather__key\">Humidity:\n            <span className=\"weather__value\"> {props.humidity}</span>\n            </p>\n        }\n        {\n            props.description && <p className=\"weather__key\">Conditions:\n            <span className=\"weather__value\"> {props.description}</span>\n            </p>\n        }\n        {\n            props.error && <p className=\"weather__error\">{props.error}</p>\n        }\n    </div>\n)\n\nexport default Weather;\n\n//Pode deixar assim ^ quando nÃ£o tem states.","import React from \"react\";\n\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\nconst API_KEY = \"d2283662ab9b692fc4f461a95c137ff2\"\n\nclass App extends React.Component {\n    state = {\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: undefined\n    }\n    getWeather = async (e) => {\n        e.preventDefault();\n        const city = e.target.elements.city.value;\n        const country = e.target.elements.country.value;\n        const api_call = await fetch(`http://api.openweathermap.org/data/2.5/find?q=${city},${country}&appid=${API_KEY}&units=metric`);\n        const data = await api_call.json();\n        if (city && country) {\n            console.log(data.list[0]);\n            this.setState({\n                temperature: data.list[0].main.temp,\n                city: data.list[0].name,\n                country: data.list[0].sys.country,\n                humidity: data.list[0].main.humidity,\n                description: data.list[0].weather[0].description,\n                error: \"\"\n            })\n        } else {\n            this.setState({\n                temperature: undefined,\n                city: undefined,\n                country: undefined,\n                humidity: undefined,\n                description: undefined,\n                error: \"Please enter the values.\"\n            })\n        }\n    }\n    render() {\n        return (\n            <div>\n                <div className=\"wrapper\">\n                    <div className=\"main\">\n                        <div className=\"container\">\n                            <div className=\"row\">\n                                <div className=\"col-xs-5 title-container\">\n                                    <Titles />\n                                </div>\n                                <div className=\"col-xs-7 form-container\">\n                                    <Form getWeather={this.getWeather} />\n                                    <Weather\n                                        temperature={this.state.temperature}\n                                        city={this.state.city}\n                                        country={this.state.country}\n                                        humidity={this.state.humidity}\n                                        description={this.state.description}\n                                        error={this.state.error}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default App;\n\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}